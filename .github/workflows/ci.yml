name: CI

on:
  push:
    branches:
      - master
      - release-*
  pull_request:
    branches:
      - master
      - release-*

jobs:
  infra:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r local-requirements.txt
        pip install -e .
        python setup.py bdist_wheel
        python -m playwright install-deps
    - name: Install browsers
      run: python -m playwright install
    - name: Lint
      uses: pre-commit/action@v2.0.0
    - name: Generate APIs
      run: bash scripts/update_api.sh
    - name: Verify generated API is up to date
      run: git diff --exit-code
  build:
    name: Build
    timeout-minutes: 30
    env:
      DEBUG: pw:*
      DEBUG_FILE: pw-log.txt
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.7, 3.8]
        browser: [chromium, firefox, webkit]
        include:
        - os: ubuntu-latest
          python-version: 3.9
          browser: chromium
        - os: windows-latest
          python-version: 3.9
          browser: chromium
        - os: macos-latest
          python-version: 3.9
          browser: chromium
        - os: macos-11.0
          python-version: 3.9
          browser: chromium
        - os: macos-11.0
          python-version: 3.9
          browser: firefox
        - os: macos-11.0
          python-version: 3.9
          browser: webkit
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r local-requirements.txt
        pip install -e .
        python setup.py bdist_wheel
        python -m playwright install-deps
    - name: Install browsers
      run: python -m playwright install
    - name: Common Tests
      run: pytest tests/common --browser=${{ matrix.browser }} --timeout 90
    - name: Test Reference count
      run: pytest tests/test_reference_count_async.py --browser=${{ matrix.browser }}
    - name: Test Wheel Installation
      run: pytest tests/test_installation.py --browser=${{ matrix.browser }}
    - name: Test Generation Scripts
      run: pytest tests/test_generation_scripts.py --browser=${{ matrix.browser }}
    - name: Test Sync API
      if: matrix.os != 'ubuntu-latest'
      run: pytest tests/sync --browser=${{ matrix.browser }} --timeout 90
    - name: Test Sync API
      if: matrix.os == 'ubuntu-latest'
      run: xvfb-run pytest tests/sync --browser=${{ matrix.browser }} --timeout 90
    - name: Test Async API
      if: matrix.os != 'ubuntu-latest'
      run: pytest tests/async --browser=${{ matrix.browser }} --timeout 90
    - name: Test Async API
      if: matrix.os == 'ubuntu-latest'
      run: xvfb-run pytest tests/async --browser=${{ matrix.browser }} --timeout 90
    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: ${{ matrix.browser }}-${{ matrix.os }}-${{ matrix.python-version }}
        path: pw-log.txt

  test-stable:
    name: Stable
    timeout-minutes: 30
    env:
      DEBUG: pw:*
      DEBUG_FILE: pw-log.txt
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser-channel: [chrome]
        include:
        - os: windows-latest
          browser-channel: msedge
        - os: macos-latest
          browser-channel: msedge
    runs-on: ${{ matrix.os }}
    steps:
    - name: Install Media Pack
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: Install-WindowsFeature Server-Media-Foundation
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r local-requirements.txt
        pip install -e .
        python setup.py bdist_wheel
        python -m playwright install-deps
    - name: Install ffmpeg
      run: python -m playwright install ffmpeg
    - name: Common Tests
      run: pytest tests/common --browser=chromium --browser-channel=${{ matrix.browser-channel }} --timeout 90
    - name: Test Sync API
      if: matrix.os != 'ubuntu-latest'
      run: pytest tests/sync --browser=chromium --browser-channel=${{ matrix.browser-channel }} --timeout 90
    - name: Test Sync API
      if: matrix.os == 'ubuntu-latest'
      run: xvfb-run pytest tests/sync --browser=chromium --browser-channel=${{ matrix.browser-channel }} --timeout 90
    - name: Test Async API
      if: matrix.os != 'ubuntu-latest'
      run: pytest tests/async --browser=chromium --browser-channel=${{ matrix.browser-channel }} --timeout 90
    - name: Test Async API
      if: matrix.os == 'ubuntu-latest'
      run: xvfb-run pytest tests/async --browser=chromium --browser-channel=${{ matrix.browser-channel }} --timeout 90
    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: ${{ matrix.browser-channel }}-${{ matrix.os }}
        path: pw-log.txt
  build-conda:
    name: Conda Build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-10.15, windows-2019]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: 3.9
          channels: conda-forge
      - name: Prepare
        run: conda install conda-build conda-verify
      - name: Build
        run: conda build .
