name: CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  infra:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: microsoft/playwright-github-action@v1
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r local-requirements.txt
        pip install -e .
    - name: Lint
      run: pre-commit run --all-files
    - name: Test Sync generation script
      run: bash buildbots/test-sync-generation.sh
  build:
    name: Build
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.7, 3.8]
        browser: [chromium, firefox, webkit]
        include:
        - os: ubuntu-latest
          python-version: 3.9
          browser: chromium
        - os: windows-latest
          python-version: 3.9
          browser: chromium
        - os: macos-latest
          python-version: 3.9
          browser: chromium
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - uses: microsoft/playwright-github-action@v1
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install -r local-requirements.txt
        pip install -e .
    - name: Build package
      run: python build_package.py
    - name: Install
      run: python -m playwright install
    - name: Test
      if: matrix.os != 'ubuntu-latest'
      run: pytest -vv --browser=${{ matrix.browser }} --junitxml=junit/test-results-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.browser }}.xml --timeout 90
    - name: Test
      if: matrix.os == 'ubuntu-latest'
      run: xvfb-run pytest -vv --browser=${{ matrix.browser }} --junitxml=junit/test-results-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.browser }}.xml --timeout 90
    - name: Upload pytest test results
      uses: actions/upload-artifact@v1
      with:
        name: pytest-results-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.browser }}.xml
        path: junit/test-results-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.browser }}.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
  test-package-installations:
    name: Test package installations
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2
    - uses: microsoft/playwright-github-action@v1
    - name: Set up Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r local-requirements.txt
        pip install -e .
    - name: Build package
      run: python build_package.py
    - name: Test package installation
      run: bash buildbots/test-package-installations.sh
